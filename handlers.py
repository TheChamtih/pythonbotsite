import logging
import json
from telegram.ext import (
    CallbackContext, ConversationHandler, CommandHandler,
    MessageHandler, Filters, CallbackQueryHandler
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from database import get_admin_ids, add_admin, get_locations, get_location_by_id, get_connection
from config import MAIN_ADMIN_ID
import os
import re
from datetime import datetime
import psycopg2
from psycopg2.extras import DictCursor
from typing import List, Dict, Optional, Union
import math
from decorators import admin_required
from constants import *

# Configure logger
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Dialog states
NAME, AGE, INTERESTS, PARENT_NAME, PHONE = range(5)
COURSE_SELECTION, LOCATION_SELECTION = range(5, 7)
CONFIRMATION = 7
COURSE_RATING_SELECTION, RATING_INPUT, COMMENT_INPUT = range(8, 11)

# Age limits
MIN_AGE = 6
MAX_AGE = 18

# Dialog text constants
DIALOG_START = "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –∫—É—Ä—Å –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞. –ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?"
DIALOG_GET_AGE = "–û—Ç–ª–∏—á–Ω–æ, {name}! –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É?"
DIALOG_GET_INTERESTS = "–ß–µ–º —É–≤–ª–µ–∫–∞–µ—Ç—Å—è –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–∑–∞–π–Ω, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ç.–¥.)"
DIALOG_GET_PARENT_NAME = "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è)"
DIALOG_GET_PHONE = "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ +7 –∏–ª–∏ 8):"
ERROR_AGE_RANGE = "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {min_age} –¥–æ {max_age} –ª–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç."
ERROR_PHONE_FORMAT = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ +7 –∏–ª–∏ 8. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä."

def get_course_name(course_id: int) -> str:
    """Gets course name by ID."""
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT name FROM courses WHERE id = %s', (course_id,))
        result = cursor.fetchone()
        return result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å"
    finally:
        conn.close()

def is_valid_phone(phone: str) -> bool:
    """Phone number format validation"""
    return re.match(
        r'^(\+7|8)[\s\-]?(\d{3})[\s\-]?(\d{3})[\s\-]?(\d{2})[\s\-]?(\d{2})$',
        phone) is not None

def notify_admins(context: CallbackContext, message: str):
    """Send notification to all admins"""
    admins = get_admin_ids()
    for admin in admins:
        try:
            context.bot.send_message(chat_id=admin, text=message)
        except Exception as e:
            logger.error(f"Failed to send message to admin {admin}: {e}")

def is_admin(user_id: int) -> bool:
    """Check if user is admin"""
    return user_id in get_admin_ids() or user_id == MAIN_ADMIN_ID

@admin_required
def view_trials(update: Update, context: CallbackContext):
    """Shows all trial lesson registrations."""
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            SELECT 
                trial_lessons.id,
                users.child_name,
                users.parent_name,
                users.phone,
                courses.name as course_name,
                districts.name as district_name,
                locations.address,
                trial_lessons.date,
                trial_lessons.confirmed
            FROM trial_lessons
            JOIN users ON trial_lessons.user_id = users.id
            JOIN courses ON trial_lessons.course_id = courses.id
            JOIN locations ON trial_lessons.location_id = locations.id
            JOIN districts ON locations.district_id = districts.id
            ORDER BY trial_lessons.date DESC
        ''')
        trials = cursor.fetchall()
        if not trials:
            update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –Ω–µ—Ç.")
            return

        message = "üìã –ó–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:\n\n"
        for trial in trials:
            trial_info = (
                f"üîñ ID –∑–∞–ø–∏—Å–∏: {trial[0]}\n"
                f"üë∂ –†–µ–±–µ–Ω–æ–∫: {trial[1]}\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {trial[2]}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {trial[3]}\n"
                f"üìö –ö—É—Ä—Å: {trial[4]}\n"
                f"üìç –†–∞–π–æ–Ω: {trial[5]}\n"
                f"üè´ –ê–¥—Ä–µ—Å: {trial[6]}\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {trial[7].strftime('%d.%m.%Y %H:%M')}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' if trial[8] else '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'}\n"
                f"{'=' * 30}\n"
            )

            if len(message + trial_info) > 4096:
                update.message.reply_text(message)
                message = trial_info
            else:
                message += trial_info

        if message:
            update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Error in view_trials: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.")
    finally:
        conn.close()

@admin_required
def filter_trials(update: Update, context: CallbackContext):
    """Shows unconfirmed trial lessons."""
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            SELECT 
                trial_lessons.id,
                users.child_name,
                users.parent_name,
                users.phone,
                courses.name as course_name,
                districts.name as district_name,
                locations.address,
                trial_lessons.date
            FROM trial_lessons
            JOIN users ON trial_lessons.user_id = users.id
            JOIN courses ON trial_lessons.course_id = courses.id
            JOIN locations ON trial_lessons.location_id = locations.id
            JOIN districts ON locations.district_id = districts.id
            WHERE trial_lessons.confirmed = FALSE
            ORDER BY trial_lessons.date DESC
        ''')
        trials = cursor.fetchall()
        if not trials:
            update.message.reply_text("–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.")
            return

        message = "üìã –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
        for trial in trials:
            trial_info = (
                f"üîñ ID –∑–∞–ø–∏—Å–∏: {trial[0]}\n"
                f"üë∂ –†–µ–±–µ–Ω–æ–∫: {trial[1]}\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {trial[2]}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {trial[3]}\n"
                f"üìö –ö—É—Ä—Å: {trial[4]}\n"
                f"üìç –†–∞–π–æ–Ω: {trial[5]}\n"
                f"üè´ –ê–¥—Ä–µ—Å: {trial[6]}\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {trial[7].strftime('%d.%m.%Y %H:%M')}\n"
                f"{'=' * 30}\n"
            )

            if len(message + trial_info) > 4096:
                update.message.reply_text(message)
                message = trial_info
            else:
                message += trial_info

        if message:
            update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Error in filter_trials: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.")
    finally:
        conn.close()

@admin_required
def clear_trials(update: Update, context: CallbackContext):
    """Deletes all unconfirmed trial lessons."""
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('DELETE FROM trial_lessons WHERE confirmed = FALSE')
        deleted_count = cursor.rowcount
        conn.commit()
        update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
    except Exception as e:
        logger.error(f"Error in clear_trials: {e}")
        conn.rollback()
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.")
    finally:
        conn.close()

@admin_required
def add_admin_command(update: Update, context: CallbackContext):
    """Adds new admin."""
    try:
        new_admin_id = int(context.args[0])
        add_admin(new_admin_id)
        update.message.reply_text(SUCCESS_ADMIN_ADDED.format(admin_id=new_admin_id))
    except (IndexError, ValueError):
        update.message.reply_text(ERROR_COMMAND_USAGE.format(command_usage="/add_admin <telegram_id>"))

@admin_required
def confirm_trial(update: Update, context: CallbackContext):
    """Confirms trial lesson and sends rating request to user."""
    try:
        trial_id = int(context.args[0])
        conn = get_connection()
        cursor = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–Ω–æ–º —É—Ä–æ–∫–µ
            cursor.execute('''
                SELECT tl.user_id, tl.course_id, c.name as course_name, u.telegram_id
                FROM trial_lessons tl
                JOIN courses c ON tl.course_id = c.id
                JOIN users u ON tl.user_id = u.id
                WHERE tl.id = %s
            ''', (trial_id,))
            trial_info = cursor.fetchone()
            if not trial_info:
                update.message.reply_text(f"–ó–∞–ø–∏—Å—å #{trial_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
            cursor.execute('''
                SELECT id FROM course_reviews 
                WHERE user_id = %s AND course_id = %s
            ''', (trial_info[0], trial_info[1]))
            existing_review = cursor.fetchone()

            if existing_review:
                # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Ä–æ–∫
                cursor.execute('UPDATE trial_lessons SET confirmed = TRUE WHERE id = %s', (trial_id,))
                conn.commit()
                update.message.reply_text(f"–ó–∞–ø–∏—Å—å #{trial_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û—Ç–∑—ã–≤ —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.")
                return

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫
            cursor.execute('UPDATE trial_lessons SET confirmed = TRUE WHERE id = %s', (trial_id,))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            update.message.reply_text(f"–ó–∞–ø–∏—Å—å #{trial_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            user_telegram_id = trial_info[3]
            course_name = trial_info[2]

            confirmation_message = (
                f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ –∫—É—Ä—Å—É \"{course_name}\" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                "–ú—ã –±—ã–ª–∏ –±—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –∫—É—Ä—Å –ø–æ—Å–ª–µ –∑–∞–Ω—è—Ç–∏—è."
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            keyboard = []
            row = []
            for i in range(10, 0, -1):
                rating = i / 2
                row.append(InlineKeyboardButton(
                    f"{'‚òÖ' * int(rating)}{('¬Ω' if rating % 1 else '')}", 
                    callback_data=f"stars_{rating}_{trial_info[1]}"  # –î–æ–±–∞–≤–ª—è–µ–º course_id –≤ callback_data
                ))
                if len(row) == 5:
                    keyboard.append(row)
                    row = []
            if row:
                keyboard.append(row)
            keyboard.append([InlineKeyboardButton("‚ùå –ü–æ–∑–∂–µ", callback_data="rate_later")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                context.bot.send_message(
                    chat_id=user_telegram_id,
                    text=confirmation_message,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"Error sending confirmation to user: {e}")
                update.message.reply_text("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

        except Exception as e:
            logger.error(f"Error confirming trial: {e}")
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
            conn.rollback()
        finally:
            conn.close()

    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm_trial <id_–∑–∞–ø–∏—Å–∏>")

@admin_required
def list_courses_admin(update: Update, context: CallbackContext):
    """Shows course list with IDs for admins."""
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            SELECT c.id, c.name, c.min_age, c.max_age, 
                   string_agg(ct.tag, ', ') as tags
            FROM courses c
            LEFT JOIN course_tags ct ON c.id = ct.course_id
            GROUP BY c.id, c.name, c.min_age, c.max_age
            ORDER BY c.id
        ''')
        courses = cursor.fetchall()
        if not courses:
            update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –ø—É—Å—Ç.")
            return

        message = "üìö –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤:\n\n"
        for course in courses:
            course_info = (
                f"ID: {course[0]}\n"
                f"üìñ –ù–∞–∑–≤–∞–Ω–∏–µ: {course[1]}\n"
                f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {course[2]}-{course[3]} –ª–µ—Ç\n"
                f"üè∑ –¢–µ–≥–∏: {course[4] or '–Ω–µ—Ç'}\n"
                f"{'=' * 30}\n"
            )

            if len(message + course_info) > 4096:
                update.message.reply_text(message)
                message = course_info
            else:
                message += course_info

        if message:
            update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Error in list_courses_admin: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤.")
    finally:
        conn.close()

@admin_required
def add_tags_command(update: Update, context: CallbackContext):
    """Adds tags to course."""
    args = context.args
    if len(args) < 2:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_tags <id_–∫—É—Ä—Å–∞> <—Ç–µ–≥1> <—Ç–µ–≥2> ...")
        return

    try:
        course_id = int(args[0])
        tags = args[1:]

        conn = get_connection()
        cursor = conn.cursor()
        try:
            # Check course exists
            cursor.execute('SELECT id FROM courses WHERE id = %s', (course_id,))
            if not cursor.fetchone():
                update.message.reply_text(f"–ö—É—Ä—Å —Å ID {course_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # Add tags
            for tag in tags:
                cursor.execute(
                    'INSERT INTO course_tags (course_id, tag) VALUES (%s, %s) ON CONFLICT DO NOTHING',
                    (course_id, tag.lower())
                )

            conn.commit()
            update.message.reply_text(f"–¢–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∫—É—Ä—Å—É #{course_id}")
        except Exception as e:
            logger.error(f"Error adding tags: {e}")
            conn.rollback()
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤.")
        finally:
            conn.close()

    except ValueError:
        update.message.reply_text("ID –∫—É—Ä—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

@admin_required
def delete_tags_command(update: Update, context: CallbackContext):
    """Deletes course tags."""
    args = context.args
    if len(args) < 2:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_tags <id_–∫—É—Ä—Å–∞> <—Ç–µ–≥1> <—Ç–µ–≥2> ...")
        return

    try:
        course_id = int(args[0])
        tags = args[1:]

        conn = get_connection()
        cursor = conn.cursor()
        try:
            # Check course exists
            cursor.execute('SELECT id FROM courses WHERE id = %s', (course_id,))
            if not cursor.fetchone():
                update.message.reply_text(f"–ö—É—Ä—Å —Å ID {course_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # Delete tags
            for tag in tags:
                cursor.execute(
                    'DELETE FROM course_tags WHERE course_id = %s AND tag = %s',
                    (course_id, tag.lower())
                )

            conn.commit()
            update.message.reply_text(f"–¢–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã —É –∫—É—Ä—Å–∞ #{course_id}")
        except Exception as e:
            logger.error(f"Error deleting tags: {e}")
            conn.rollback()
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤.")
        finally:
            conn.close()

    except ValueError:
        update.message.reply_text("ID –∫—É—Ä—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

def list_courses(update: Update, context: CallbackContext):
    """Shows list of all courses for users."""
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            SELECT name, description, min_age, max_age
            FROM courses
            ORDER BY name
        ''')
        courses = cursor.fetchall()
        if not courses:
            update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
            return

        message = "üìö –ù–∞—à–∏ –∫—É—Ä—Å—ã:\n\n"
        for course in courses:
            course_info = (
                f"‚Ä¢ {course[0]}\n"
                f"  {course[1]}\n"
                f"  –í–æ–∑—Ä–∞—Å—Ç: {course[2]}-{course[3]} –ª–µ—Ç\n\n"
            )

            if len(message + course_info) > 4096:
                update.message.reply_text(message)
                message = course_info
            else:
                message += course_info

        if message:
            update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Error in list_courses: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤.")
    finally:
        conn.close()

def handle_clear_trials(update: Update, context: CallbackContext):
    """Handles callback for clearing trial lessons."""
    query = update.callback_query
    query.answer()

    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if query.data.startswith("clear_trials_confirm"):
        conn = get_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('DELETE FROM trial_lessons WHERE confirmed = FALSE')
            deleted_count = cursor.rowcount
            conn.commit()
            query.edit_message_text(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        except Exception as e:
            logger.error(f"Error clearing trials: {e}")
            query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–ø–∏—Å–µ–π.")
            conn.rollback()
        finally:
            conn.close()
    else:
        keyboard = [[
            InlineKeyboardButton("–î–∞", callback_data="clear_trials_confirm"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="clear_trials_cancel")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏?",
            reply_markup=reply_markup
        )

@admin_required
def get_stats(update: Update, context: CallbackContext):
    """Shows detailed statistics about platform usage and user activity."""
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=DictCursor)

    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) as total FROM users")
        result = cursor.fetchone()
        total_users = result['total'] if result else 0

        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute("""
            SELECT COUNT(DISTINCT user_id) as active_today
            FROM user_activities
            WHERE timestamp >= CURRENT_DATE
        """)
        result = cursor.fetchone()
        active_today = result['active_today'] if result else 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        cursor.execute("""
            SELECT 
                COALESCE(details->>'platform', 'web') as platform,
                COUNT(*) as count
            FROM user_activities
            GROUP BY platform
        """)
        platform_stats = cursor.fetchall()

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        cursor.execute("""
            SELECT 
                DATE(timestamp) as date,
                COUNT(*) as count
            FROM user_activities
            WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days'
            GROUP BY date
            ORDER BY date DESC
        """)
        daily_activity = cursor.fetchall()

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        cursor.execute("""
            SELECT 
                u.username,
                ua.activity_type,
                ua.timestamp
            FROM user_activities ua
            JOIN users u ON ua.user_id = u.id
            ORDER BY ua.timestamp DESC
            LIMIT 5
        """)
        recent_activities = cursor.fetchall()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚ú® –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n\n"
            "üì± –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:\n"
        )

        for stat in platform_stats:
            platform_name = "üåê –í–µ–±" if stat['platform'] == 'web' else "üì± Telegram"
            message += f"{platform_name}: {stat['count']}\n"

        message += "\nüìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π:\n"
        for activity in daily_activity:
            date_str = activity['date'].strftime('%d.%m')
            count = activity['count']
            message += f"{date_str}: {'üìä' * min(count, 5)} ({count})\n"

        message += "\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        for activity in recent_activities:
            username = activity['username'] or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            timestamp = activity['timestamp'].strftime('%H:%M')
            message += f"‚Ä¢ {username} - {activity['activity_type']} ({timestamp})\n"

        update.message.reply_text(message)

    except Exception as e:
        logger.error(f"Error getting statistics: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    finally:
        conn.close()

def help_command(update: Update, context: CallbackContext):
    """Shows available commands."""
    user_id = update.message.from_user.id
    logger.info(f"Help command executed by user {user_id}")

    help_text = USER_COMMANDS

    if is_admin(user_id):
        domain = os.environ.get('REPLIT_DEV_DOMAIN', 'codecreate.tech')
        admin_url = f"https://{domain}/admin"
        help_text += ADMIN_COMMANDS.format(admin_url=admin_url)

    update.message.reply_text(help_text)

def about_command(update: Update, context: CallbackContext):
    """School information."""
    update.message.reply_text(
        """
        üè´ –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞ ‚Äî –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —à–∫–æ–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π 7-17 –ª–µ—Ç.

        –ú—ã –ø–æ–º–æ–≥–∞–µ–º –¥–µ—Ç—è–º –æ—Å–≤–æ–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –±—É–¥—É—â–µ–≥–æ:
        - –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python, JavaScript –∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö.
        - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
        - –û—Å–Ω–æ–≤—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –ª–æ–≥–∏–∫–∏.
        - –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
        - –ò–∑—É—á–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.

        üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        - –¢–µ–ª–µ—Ñ–æ–Ω: +7 (800) 555-35-35
        - Email: info@algoritmika.org
        - –í–µ–±-—Å–∞–π—Ç: algoritmika.org (https://algoritmika.org/)
        - –ê–¥—Ä–µ—Å: –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 42 (–≥–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å)

        üìç –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ –±–æ–ª–µ–µ —á–µ–º 20 —Å—Ç—Ä–∞–Ω–∞—Ö –º–∏—Ä–∞!

        –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –º–∏—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏!
        –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
        """
    )

def list_locations_command(update: Update, context: CallbackContext):
    """Shows all locations."""
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            SELECT d.name as district_name, l.address 
            FROM locations l
            JOIN districts d ON l.district_id = d.id
            ORDER BY d.name, l.address
        ''')
        locations = cursor.fetchall()
        if not locations:
            update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.")
            return

        message = "üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞:\n\n"
        current_district = None

        for location in locations:
            district_name, address = location
            if current_district != district_name:
                current_district = district_name  
                message += f"\nüè¢ {district_name}:\n"
            message += f"‚Ä¢ {address}\n"

        update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Error in list_locations_command: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤.")
    finally:
        conn.close()

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancels conversation."""
    update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(DIALOG_START)
    return NAME

def get_name(update: Update, context: CallbackContext) -> int:
    """Handles the name input."""
    user_name = update.message.text
    context.user_data['child_name'] = user_name
    update.message.reply_text(DIALOG_GET_AGE.format(name=user_name))
    return AGE

def get_age(update: Update, context: CallbackContext) -> int:
    """Handles the age input."""
    try:
        user_age = int(update.message.text)
        if not MIN_AGE <= user_age <= MAX_AGE:
            update.message.reply_text(ERROR_AGE_RANGE.format(min_age=MIN_AGE, max_age=MAX_AGE))
            return AGE
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return AGE

    context.user_data['child_age'] = user_age
    update.message.reply_text(DIALOG_GET_INTERESTS)
    return INTERESTS

def get_interests(update: Update, context: CallbackContext) -> int:
    """Handles the interests input."""
    interests = update.message.text
    context.user_data['child_interests'] = interests
    update.message.reply_text(DIALOG_GET_PARENT_NAME)
    return PARENT_NAME

def get_parent_name(update: Update, context: CallbackContext) -> int:
    """Handles the parent name input."""
    parent_name = update.message.text
    context.user_data['parent_name'] = parent_name
    update.message.reply_text(DIALOG_GET_PHONE)
    return PHONE

def get_phone(update: Update, context: CallbackContext) -> int:
    """Handles the phone number input."""
    phone = update.message.text
    if not is_valid_phone(phone):
        update.message.reply_text(ERROR_PHONE_FORMAT)
        return PHONE

    context.user_data['phone'] = phone

    conn = get_connection()
    cursor = conn.cursor()
    try:
        # Get user's profile photos
        telegram_user = update.effective_user
        profile_photos = context.bot.get_user_profile_photos(telegram_user.id, limit=1)
        telegram_avatar_url = None

        if profile_photos and profile_photos.photos:
            # Get the file_id of the most recent profile photo
            file_id = profile_photos.photos[0][-1].file_id
            # Get file path
            file = context.bot.get_file(file_id)
            telegram_avatar_url = file.file_path

        # Check if user exists
        cursor.execute('''
            SELECT id FROM users 
            WHERE telegram_id = %s
        ''', (update.effective_user.id,))

        user = cursor.fetchone()

        if user:
            # Update existing user
            cursor.execute('''
                UPDATE users 
                SET parent_name = %s, 
                    phone = %s, 
                    child_name = %s, 
                    child_age = %s,
                    child_interests = %s,
                    telegram_avatar_url = %s,
                    username = %s,
                    first_name = %s,
                    last_name = %s
                WHERE telegram_id = %s
                RETURNING id
            ''', (
                context.user_data['parent_name'],
                context.user_data['phone'],
                context.user_data['child_name'],
                context.user_data['child_age'],
                context.user_data.get('child_interests', ''),
                telegram_avatar_url,
                update.effective_user.username,
                update.effective_user.first_name,
                update.effective_user.last_name,
                update.effective_user.id
            ))
            user_id = cursor.fetchone()[0]
        else:
            # Create new user
            cursor.execute('''
                INSERT INTO users (
                    telegram_id, 
                    parent_name, 
                    phone, 
                    child_name, 
                    child_age,
                    child_interests,
                    telegram_avatar_url,
                    username,
                    first_name,
                    last_name
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                RETURNING id
            ''', (
                update.effective_user.id,
                context.user_data['parent_name'],
                context.user_data['phone'],
                context.user_data['child_name'],
                context.user_data['child_age'],
                context.user_data.get('child_interests', ''),
                telegram_avatar_url,
                update.effective_user.username,
                update.effective_user.first_name,
                update.effective_user.last_name
            ))
            user_id = cursor.fetchone()[0]

        conn.commit()

        # Get suitable courses
        cursor.execute('''
            SELECT c.id, c.name, c.description, c.min_age, c.max_age
            FROM courses c
            WHERE c.min_age <= %s AND c.max_age >= %s
        ''', (context.user_data['child_age'], context.user_data['child_age']))

        courses = cursor.fetchall()

        if not courses:
            update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É—Ä—Å–æ–≤.")
            return ConversationHandler.END

        keyboard = []
        for course in courses:
            keyboard.append([InlineKeyboardButton(course[1], callback_data=f"course_{course[0]}")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="exit")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å:", reply_markup=reply_markup)

        context.user_data['user_id'] = user_id
        return COURSE_SELECTION

    except Exception as e:
        logger.error(f"Error in get_phone: {e}")
        conn.rollback()
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        conn.close()

def select_course(update: Update, context: CallbackContext) -> int:
    """Handles course selection."""
    query = update.callback_query
    query.answer()

    if query.data == "exit":
        query.edit_message_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /start")
        return ConversationHandler.END

    course_id = int(query.data.split("_")[1])
    context.user_data['course_id'] = course_id
    logger.info(f"User {update.effective_user.id} selected course {course_id}")

    # Get course details
    conn = get_connection()
    cursor = conn.cursor()
    try:
        # Get course name
        cursor.execute('SELECT name FROM courses WHERE id = %s', (course_id,))
        course = cursor.fetchone()
        if not course:
            logger.error(f"Course {course_id} not found in database")
            query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å /start")
            return ConversationHandler.END

        logger.info(f"Found course: {course[0]}")

        # Get locations
        cursor.execute('''
            SELECT d.name as district_name, l.address, l.id
            FROM locations l
            JOIN districts d ON l.district_id = d.id
            ORDER BY d.name, l.address
        ''')
        locations = cursor.fetchall()
        logger.info(f"Found {len(locations)} available locations")

        if not locations:
            logger.warning("No locations available in the database")
            query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏.")
            return ConversationHandler.END

        # Create keyboard with locations
        keyboard = []
        for location in locations:
            district_name = location[0]
            address = location[1]
            location_id = location[2]
            keyboard.append([
                InlineKeyboardButton(
                    f"{district_name} - {address}",
                    callback_data=f"location_{location_id}"
                )
            ])
            logger.debug(f"Added location option: {district_name} - {address} (ID: {location_id})")

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="exit")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {course[0]}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –ª–æ–∫–∞—Ü–∏—é:"
        )
        query.edit_message_text(message, reply_markup=reply_markup)
        logger.info(f"Showing location selection menu for course {course[0]}")

        return LOCATION_SELECTION

    except Exception as e:
        logger.error(f"Error in select_course: {str(e)}", exc_info=True)
        query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        conn.close()

def select_location(update: Update, context: CallbackContext) -> int:
    """Handles location selection."""
    query = update.callback_query
    query.answer()

    if query.data == "exit":
        query.edit_message_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return ConversationHandler.END

    if query.data.startswith("location_"):
        location_id = int(query.data.split("_")[1])
        context.user_data['location_id'] = location_id

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_yes"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        location = get_location_by_id(location_id)
        course_name = get_course_name(context.user_data['course_id'])

        confirmation_text = (
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ:\n\n"
            f"–ö—É—Ä—Å: {course_name}\n"
            f"–†–∞–π–æ–Ω: {location[0]}\n"
            f"–ê–¥—Ä–µ—Å: {location[1]}\n"
            f"\n–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )

        query.edit_message_text(text=confirmation_text, reply_markup=reply_markup)
        return CONFIRMATION

    return ConversationHandler.END

def get_location_by_id(location_id: int) -> tuple:
    """Gets location info by ID."""
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            SELECT d.name, l.address
            FROM locations l
            JOIN districts d ON l.district_id = d.id
            WHERE l.id = %s
        ''', (location_id,))
        result = cursor.fetchone()
        return result if result else ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"Error in get_location_by_id: {e}")
        return ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–π–æ–Ω", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    finally:
        conn.close()

def confirm_choice(update: Update, context: CallbackContext) -> int:
    """Handles confirmation of trial lesson choice."""
    query = update.callback_query
    query.answer()

    if query.data == "confirm_no":
        query.edit_message_text("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.")
        return COURSE_SELECTION

    if query.data == "confirm_yes":
        conn = None
        try:
            conn = get_connection()
            cursor = conn.cursor()

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–±–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏
            cursor.execute('''
                INSERT INTO trial_lessons (
                    user_id, course_id, location_id, date, confirmed
                ) VALUES (
                    %s, %s, %s, NOW(), FALSE
                ) RETURNING id
            ''', (
                context.user_data['user_id'],
                context.user_data['course_id'],
                context.user_data['location_id']
            ))

            trial_id = cursor.fetchone()
            if not trial_id:
                raise Exception("Failed to create trial lesson")

            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            location = get_location_by_id(context.user_data['location_id'])
            course_name = get_course_name(context.user_data['course_id'])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success_message = (
                f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üìö –ö—É—Ä—Å: {course_name}\n"
                f"üìç –†–∞–π–æ–Ω: {location[0]}\n"
                f"üè´ –ê–¥—Ä–µ—Å: {location[1]}\n\n"
                "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏—è."
            )
            query.edit_message_text(success_message)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_message = (
                f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ!\n"
                f"ID –∑–∞–ø–∏—Å–∏: {trial_id[0]}\n"
                f"–ö—É—Ä—Å: {course_name}"
            )
            notify_admins(context, admin_message)

            return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error in confirm_choice: {e}")
            if conn:
                conn.rollback()
            query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return ConversationHandler.END
        finally:
            if conn:
                conn.close()

    return ConversationHandler.END

# Get the main conversation handler
def get_conversation_handler():
    """Main conversation handler for course selection and trial lesson signup flow"""
    return ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(Filters.text & ~Filters.command, get_name)],
            AGE: [MessageHandler(Filters.text & ~Filters.command, get_age)],
            INTERESTS: [MessageHandler(Filters.text & ~Filters.command, get_interests)],
            PARENT_NAME: [MessageHandler(Filters.text & ~Filters.command, get_parent_name)],
            PHONE: [MessageHandler(Filters.text & ~Filters.command, get_phone)],
            COURSE_SELECTION: [
                CallbackQueryHandler(select_course, pattern='^course_|^exit$')
            ],
            LOCATION_SELECTION: [                CallbackQueryHandler(select_location, pattern='^location_|^exit$')
            ],
            CONFIRMATION: [
                CallbackQueryHandler(confirm_choice, pattern='^confirm_yes$|^confirm_no$|^exit$')
            ],
            COMMENT_INPUT: [
                MessageHandler(Filters.text & ~Filters.command, handle_comment),
                CommandHandler('skip', handle_comment)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

def get_confirm_trial_handler():
    """Returns handler for trial lesson confirmation command."""
    return CommandHandler('confirm_trial', confirm_trial)


# Added functions for course rating
def rate_course_command(update: Update, context: CallbackContext) -> int:
    """Starts the course rating dialog."""
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT id, name FROM courses ORDER BY name')
        courses = cursor.fetchall()
        if not courses:
            update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")
            return ConversationHandler.END

        keyboard = []
        for course in courses:
            keyboard.append([InlineKeyboardButton(course[1], callback_data=f"rate_{course[0]}")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
            reply_markup=reply_markup
        )
        return COURSE_RATING_SELECTION
    except Exception as e:
        logger.error(f"Error in rate_course_command: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        conn.close()

def select_course_to_rate(update: Update, context: CallbackContext) -> int:
    """Handles course selection for rating."""
    query = update.callback_query
    query.answer()

    if query.data == "cancel":
        query.edit_message_text("–û—Ü–µ–Ω–∫–∞ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    course_id = int(query.data.split("_")[1])
    context.user_data['rating_course_id'] = course_id

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–æ–∫ —Å —à–∞–≥–æ–º 0.5
    keyboard = []
    row = []
    for i in range(10, 0, -1):
        rating = i / 2
        row.append(InlineKeyboardButton(f"{'‚òÖ' * int(rating)}{('¬Ω' if rating % 1 else '')}", 
                                      callback_data=f"stars_{rating}"))
        if len(row) == 5:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        "–û—Ü–µ–Ω–∏—Ç–µ –∫—É—Ä—Å –æ—Ç 0.5 –¥–æ 5 –∑–≤—ë–∑–¥:",
        reply_markup=reply_markup
    )
    return RATING_INPUT

def handle_rating_input(update: Update, context: CallbackContext) -> int:
    """Handles the rating selection."""
    query = update.callback_query
    query.answer()

    if query.data == "cancel":
        query.edit_message_text("–û—Ü–µ–Ω–∫–∞ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    rating = float(query.data.split("_")[1])
    context.user_data['rating_value'] = rating

    query.edit_message_text(
        f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∑–≤—ë–∑–¥.\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–µ? "
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
    )
    return COMMENT_INPUT

def handle_rating_callback(update: Update, context: CallbackContext) -> int:
    """Handles rating selection."""
    query = update.callback_query
    query.answer()

    if query.data == "rate_later":
        query.edit_message_text("–•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∫—É—Ä—Å –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    # Extract rating and course_id from callback data
    try:
        # Format: stars_X.X_Y where X.X is rating and Y is course_id
        _, rating_str, course_id = query.data.split('_')
        rating = float(rating_str)
        course_id = int(course_id)
    except (ValueError, IndexError):
        logger.error(f"Invalid rating callback data: {query.data}")
        query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    # Store rating in context for later use
    context.user_data['rating'] = rating
    context.user_data['course_id'] = course_id

    # Create keyboard for comment options
    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="rate_later")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É?\n"
        "–ï—Å–ª–∏ –¥–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ.\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
        reply_markup=reply_markup
    )

    return COMMENT_INPUT

def handle_comment(update: Update, context: CallbackContext) -> int:
    """Handles comment input for course review."""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        # Get user_id
        cursor.execute(
            'SELECT id FROM users WHERE telegram_id = %s',
            (update.effective_user.id,)
        )
        user_result = cursor.fetchone()
        if not user_result:
            logger.error(f"User not found for telegram_id: {update.effective_user.id}")
            if isinstance(update, CallbackQuery):
                update.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

        user_id = user_result[0]
        rating = context.user_data.get('rating')
        course_id = context.user_data.get('course_id')

        if not rating or not course_id:
            logger.error("Missing rating or course_id in user_data")
            if isinstance(update, CallbackQuery):
                update.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏ –∑–∞–Ω–æ–≤–æ.")
            else:
                update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END

        # Get comment text
        comment = None
        if isinstance(update, CallbackQuery):
            # Skip comment case
            update.answer()
        else:
            comment = update.message.text

        # Check if user already reviewed this course
        cursor.execute('''
            SELECT id FROM course_reviews 
            WHERE user_id = %s AND course_id = %s
        ''', (user_id, course_id))
        existing_review = cursor.fetchone()

        if existing_review:
            # Update existing review
            cursor.execute('''
                UPDATE course_reviews 
                SET rating = %s, comment = %s, updated_at = NOW(), source = 'telegram'
                WHERE user_id = %s AND course_id = %s
                RETURNING id
            ''', (rating, comment, user_id, course_id))
        else:
            # Create new review
            cursor.execute('''
                INSERT INTO course_reviews (user_id, course_id, rating, comment, source)
                VALUES (%s, %s, %s, %s, 'telegram')
                RETURNING id
            ''', (user_id, course_id, rating, comment))

        review_id = cursor.fetchone()[0]

        # Log activity
        activity_details = {
            'review_id': review_id,
            'course_id': course_id,
            'rating': rating,
            'action': 'update' if existing_review else 'create',
            'platform': 'telegram'
        }

        # Convert dict to JSON string using json.dumps()
        activity_details_json = json.dumps(activity_details)

        cursor.execute('''
            INSERT INTO user_activities (user_id, activity_type, details)
            VALUES (%s, %s, %s::JSON)
        ''', (
            user_id,
            'review_update' if existing_review else 'review_create',
            activity_details_json
        ))

        # Update course average rating
        cursor.execute('''
            UPDATE courses 
            SET rating = (
                SELECT AVG(rating)::NUMERIC(3,2)
                FROM course_reviews
                WHERE course_id = %s
            ),
            rating_count = (
                SELECT COUNT(*)
                FROM course_reviews
                WHERE course_id = %s
            )
            WHERE id = %s
        ''', (course_id, course_id, course_id))

        conn.commit()

        # Send confirmation message
        thank_you_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üåü"
        if isinstance(update, CallbackQuery):
            update.edit_message_text(thank_you_text)
        else:
            update.message.reply_text(thank_you_text)

    except Exception as e:
        logger.error(f"Error saving review: {e}")
        conn.rollback()
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if isinstance(update, CallbackQuery):
            update.edit_message_text(error_message)
        else:
            update.message.reply_text(error_message)
    finally:
        conn.close()

    return ConversationHandler.END

def get_rating_conversation_handler():
    """Returns the conversation handler for course rating."""
    return ConversationHandler(
        entry_points=[CommandHandler('rate_course', rate_course_command)],
        states={
            COURSE_RATING_SELECTION: [
                CallbackQueryHandler(select_course_to_rate, pattern='^rate_|^cancel$')
            ],
            RATING_INPUT: [
                CallbackQueryHandler(handle_rating_input, pattern='^stars_|^cancel$')
            ],
            COMMENT_INPUT: [
                MessageHandler(Filters.text & ~Filters.command, handle_comment),
                CommandHandler('skip', handle_comment)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

def handle_star_rating(update: Update, context: CallbackContext) -> None:
    """Handles star rating callback."""
    query = update.callback_query
    query.answer()

    data = query.data.split('_')
    if len(data) < 3:
        return

    rating = float(data[1])
    course_id = int(data[2])

    try:
        conn = get_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (update.effective_user.id,))
        user = cursor.fetchone()

        if not user:
            query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤
        cursor.execute('''
            SELECT id FROM course_reviews 
            WHERE user_id = %s AND course_id = %s
        ''', (user[0], course_id))

        if cursor.fetchone():
            query.edit_message_text("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
        cursor.execute('''
            INSERT INTO course_reviews (course_id, user_id, rating, source)
            VALUES (%s, %s, %s, 'telegram')
            RETURNING id
        ''', (course_id, user[0], rating))
        review_id = cursor.fetchone()[0]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—Å–∞
        cursor.execute('''
            SELECT rating, rating_count
            FROM courses
            WHERE id = %s
        ''', (course_id,))
        course_data = cursor.fetchone()
        current_rating = course_data[0] or 0
        rating_count = course_data[1] or 0

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        new_rating = ((current_rating * rating_count) + rating) / (rating_count + 1)

        cursor.execute('''
            UPDATE courses
            SET rating = %s, rating_count = rating_count + 1
            WHERE id = %s
        ''', (new_rating, course_id))

        conn.commit()

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        keyboard = [[
            InlineKeyboardButton("–î–∞", callback_data=f"add_comment_{review_id}"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="no_comment")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É?",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error handling star rating: {e}")
        query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        conn.rollback()
    finally:
        conn.close()